/* Custom styles for VButton based on the provided image */

// Define the teal color for info buttons from the image
$ui-info-custom-teal: #4fb9af;
$ui-info-custom-teal-rgb: 79, 185, 175; // RGB for rgba() usage

// --- Mixins for button variants ---
@mixin button-variant($bg, $text-color, $border-color: $bg) {
  background-color: $bg !important;
  color: $text-color !important;
  border-color: $border-color !important;

  .p-button-icon,
  .p-button-label {
    color: $text-color !important;
  }

  &:not(:disabled):hover {
    @if type-of($bg) == color {
      // $bg is a SASS color (e.g., #4FB9AF or a SASS variable holding a literal color)
      $hover-bg: lighten(desaturate($bg, 7%), 7%);
      background-color: $hover-bg !important;

      // Adjust border color on hover if it was derived from $bg or is also a SASS color
      @if $border-color == $bg {
        border-color: $hover-bg !important;
      } @else if type-of($border-color) == color {
        border-color: lighten(desaturate($border-color, 7%), 7%) !important;
      }
      // If $border-color is a string (CSS var), it remains unchanged by this SASS logic
    } @else {
      // $bg is a string (e.g., CSS variable 'var(--ui-primary)')
      // Apply a filter-based hover effect. This affects the entire element including its border.
      filter: brightness(1.07);
    }
  }
}

@mixin button-outlined-variant($color, $color-rgb) {
  border: 1px solid $color !important;
  color: $color !important;
  background-color: transparent !important;

  .p-button-icon,
  .p-button-label {
    color: $color !important;
  }

  &:not(:disabled):hover {
    @if type-of($color) == color {
      background-color: rgba($color, 0.1) !important;
    } @else {
      // Assuming $color is a string (CSS var) and $color-rgb is a string (CSS var for rgb components)
      background-color: unquote('rgba(#{$color-rgb}, 0.1)') !important;
    }
    color: $color !important; // Text color remains $color
  }
}

@mixin button-text-variant($color, $color-rgb) {
  color: $color !important;
  background-color: transparent !important;
  border-color: transparent !important;

  .p-button-icon,
  .p-button-label {
    color: $color !important;
  }

  &:not(:disabled):hover {
    @if type-of($color) == color {
      background-color: rgba($color, 0.1) !important;
    } @else {
      // Assuming $color is a string (CSS var) and $color-rgb is a string (CSS var for rgb components)
      background-color: unquote('rgba(#{$color-rgb}, 0.1)') !important;
    }
    color: $color !important; // Text color remains $color
  }
}

// --- Base Button Adjustments ---
.p-button {
  transition: background-color 0.2s, color 0.2s, border-color 0.2s,
    box-shadow 0.2s;
  font-weight: 500; // Buttons in image appear slightly bolder

  // Ensure icons are vertically centered if needed (PrimeVue usually handles this)
  .p-button-icon-left,
  .p-button-icon-right {
    // Example: margin-top: -0.05em;
  }
}

// --- Solid Buttons (default, not outlined, not text) ---
.p-button {
  &.p-button-primary:not(.p-button-outlined):not(.p-button-text) {
    @include button-variant(var(--ui-primary), #ffffff);
  }
  &.p-button-secondary:not(.p-button-outlined):not(.p-button-text) {
    @include button-variant(var(--ui-secondary), #ffffff);
  }
  &.p-button-success:not(.p-button-outlined):not(.p-button-text) {
    @include button-variant(var(--ui-success), #ffffff);
  }
  &.p-button-info:not(.p-button-outlined):not(.p-button-text) {
    @include button-variant($ui-info-custom-teal, #ffffff);
  }
  &.p-button-warning:not(.p-button-outlined):not(.p-button-text) {
    // White text on yellow as per image
    @include button-variant(var(--ui-warning), #ffffff);
  }
  &.p-button-danger:not(.p-button-outlined):not(.p-button-text) {
    @include button-variant(var(--ui-danger), #ffffff);
  }
}

// --- Outlined Buttons ---
.p-button.p-button-outlined {
  border-width: 1.5px !important; // Outlined buttons in image appear to have slightly thicker border

  &.p-button-primary {
    @include button-outlined-variant(var(--ui-primary), var(--ui-primary-rgb));
  }
  &.p-button-secondary {
    @include button-outlined-variant(
      var(--ui-secondary),
      var(--ui-secondary-rgb)
    );
  }
  &.p-button-success {
    @include button-outlined-variant(var(--ui-success), var(--ui-success-rgb));
  }
  &.p-button-info {
    @include button-outlined-variant(
      $ui-info-custom-teal,
      $ui-info-custom-teal-rgb
    );
  }
  &.p-button-warning {
    @include button-outlined-variant(var(--ui-warning), var(--ui-warning-rgb));
  }
  &.p-button-danger {
    @include button-outlined-variant(var(--ui-danger), var(--ui-danger-rgb));
  }
}

// --- Text Buttons ---
.p-button.p-button-text {
  &.p-button-primary {
    @include button-text-variant(var(--ui-primary), var(--ui-primary-rgb));
  }
  &.p-button-secondary {
    @include button-text-variant(var(--ui-secondary), var(--ui-secondary-rgb));
  }
  &.p-button-success {
    @include button-text-variant(var(--ui-success), var(--ui-success-rgb));
  }
  &.p-button-info {
    @include button-text-variant(
      $ui-info-custom-teal,
      $ui-info-custom-teal-rgb
    );
  }
  &.p-button-warning {
    @include button-text-variant(var(--ui-warning), var(--ui-warning-rgb));
  }
  &.p-button-danger {
    @include button-text-variant(var(--ui-danger), var(--ui-danger-rgb));
  }
}

// --- Raised Buttons ---
.p-button.p-button-raised:not(:disabled) {
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.12), 0 1px 4px 0 rgba(0, 0, 0, 0.08) !important;
}
.p-button.p-button-raised:not(:disabled):hover {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 6px 0 rgba(0, 0, 0, 0.08) !important;
  // transform: translateY(-1px); // Optional: lift effect
}

// --- Rounded Buttons ---
.p-button.p-button-rounded {
  border-radius: 50px !important; // Pill shape
}

// --- Disabled State ---
.p-button:disabled {
  opacity: 0.45 !important; // Match faintness from image
}
